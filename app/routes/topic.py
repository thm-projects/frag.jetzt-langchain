from fastapi import APIRouter, Body, Request
from langchain_core.messages import HumanMessage
from pydantic import BaseModel, Field
from langchain_core.prompts import SystemMessagePromptTemplate

from app.routes.utils import select_model
from app.security.oauth2 import ROOM_DEPENDENCIES, per_req_config_modifier


class TopicSelect(BaseModel):
    """The topic of the content."""

    topic: str = Field(
        description="Either a new topic generated by the model or a topic selected from the list."
    )


prompt = SystemMessagePromptTemplate.from_template("""You are an AI assistant tasked with determining if a piece of content belongs to an existing topic or if a new topic should be created.

Process:
1. **Compare with Existing Topics:** Analyze the content and compare it with the predefined topic list:
   {topics}
2. **Select or Create a Topic:**
   - If a topic **fully** covers the content, use it.
   - If multiple topics **partially** fit but none fully match, create a **new** topic.
   - If the content is **contradictory** to existing topics or logically does not fit, create a **new** topic.
3. **Naming the Topic:**
   - Prefer **nouns** for clarity and generalization.
   - **Adjectives** and **verbs** may be used if they make the topic more precise or natural.
4. **Language Consistency:**
   - The output topic must be in the same language as the input content.
                                     
Output Format:
- Provide **only the final topic** (either an existing one or a newly created one).
- Ensure the topic is clear, precise, and accurately represents the main content.
- Do not include explanations.""")


async def run_topic_create(model, topics: list[str], text: str):
    model = model.with_structured_output(TopicSelect)
    text = ""
    if len(topics) > 0:
        text = f"  - {'\n  - '.join(topics)}"
    return await model.ainvoke([prompt.format(topics=text), HumanMessage(text)])


router = APIRouter()


@router.post("/create", dependencies=ROOM_DEPENDENCIES, tags=["Topics"])
async def apply_category(
    request: Request,
    topics: list[str] = Body(..., embed=True),
    text: str = Body(..., embed=True),
) -> TopicSelect:
    config = {"configurable": {}}
    await per_req_config_modifier(config, request)
    model = select_model(None, config)
    return await run_topic_create(model, topics, text)